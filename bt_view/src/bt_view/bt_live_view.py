import os
import subprocess
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileSystemEvent

from btlib.bts import xml_to_networkx  # type: ignore
try:
    from bt_view import draw_pygraphviz_svg  # type: ignore
    from bt_view import get_pygraphviz_svg  # type: ignore
    from app import app, send_sse_message
except ImportError:
    from .bt_view import draw_pygraphviz_svg  # type: ignore
    from .bt_view import get_pygraphviz_svg  # type: ignore
    from .app import app, send_sse_message


class FileModifiedHandler(FileSystemEventHandler):
    """Handler for File Observer. on_modified is called when observer file
    is modified, checks for debounce (1s) and executes trigger function"""
    def __init__(self, im_handler):
        self.modified_event_time = 0
        self.debounce_time = 1  # Set the debounce time to 1 second
        self.im_handler = im_handler

    def on_modified(self, event: FileSystemEvent):
        """execute trigger function on modified after debouncing"""
        if self.debounce() is True:
            data = self.im_handler.get_svg_as_str()
            send_sse_message(data)

    def debounce(self):
        """Debouncing multiple save events which can be generated by
        different editors"""
        current_time = time.time()
        if current_time - self.modified_event_time > self.debounce_time:
            self.modified_event_time = current_time
            return True
        return False


class MonitorLiveChanges():
    """Main Class for handling live changes. One instance of this class has
    exactly one xml file to watch."""

    def __init__(self, xml_file_name: str) -> None:
        self.bt_xml_fname = xml_file_name
        self.im_handler = ImageHandler(xml_file_name)

    def monitor_file(self):
        """Monitoring handed file by setting up observer"""
        self.im_handler.draw_and_save_svg(self.bt_xml_fname)
        self.run_in_loop(self.bt_xml_fname)

    def run_in_loop(self, path: str):
        """Setting up logger and going in while True loop. Meanwhile, File is
        permanently watched for changes and FileModifiedHandler updates SVG."""
        redis_process = subprocess.Popen(['redis-server'])
        event_handler = FileModifiedHandler(self.im_handler)

        observer = Observer()
        observer.schedule(event_handler, path, recursive=True)
        observer.start()

        try:
            print("The live view is running on http://localhost:5000/")
            app.run()
        except KeyboardInterrupt:
            observer.stop()
            redis_process.kill()
        observer.join()
        # TODO: delete temp file here?


class ImageHandler():
    """Handler for svg images. Saves on creation one xml file which from then
    on is always used as base for image generation."""

    def __init__(self, xml_file_path: str) -> None:
        self.xml_path = xml_file_path
        self.g = self.xml_file_to_graph

    def get_svg_as_str(self) -> str:
        """Returns svg of graph as a string."""
        self.g = self.xml_file_to_graph(self.xml_path)
        return get_pygraphviz_svg(self.g)

    def draw_and_save_svg(self, bt_xml_fname: str) -> None:
        """Draw new svg image and save in the current directory."""
        g = self.xml_file_to_graph(bt_xml_fname)
        path_to_svg = os.getcwd() + '/live_visualization'
        draw_pygraphviz_svg(g, path_to_svg)

    def xml_file_to_graph(self, bt_xml_fname: str):
        """Convert xml file to graph"""
        assert bt_xml_fname.endswith(
            '.xml'), f'Must be a xml file: {bt_xml_fname}'
        assert os.path.isfile(bt_xml_fname), f'File must exist: {bt_xml_fname}'
        g, _ = xml_to_networkx(bt_xml_fname)
        return g
