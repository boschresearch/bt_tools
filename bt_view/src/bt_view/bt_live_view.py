import os
import time
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileSystemEvent

from btlib.bts import xml_to_networkx  # type: ignore
try:
    from bt_view import draw_pygraphviz_svg  # type: ignore
except ImportError:
    from .bt_view import draw_pygraphviz_svg  # type: ignore


class FileModifiedHandler(FileSystemEventHandler):
    """Handler for File Observer. on_modified is called when observer file
    is modified, checks for debounce (1s) and executes trigger function"""
    def __init__(self, on_trigger_func):
        self.modified_event_time = 0
        self.debounce_time = 1  # Set the debounce time to 1 second
        self.trigger_func = on_trigger_func

    def on_modified(self, event: FileSystemEvent):
        """execute trigger function on modified after debouncing"""
        if self.debounce() is True:
            self.trigger_func()

    def debounce(self):
        """Debouncing multiple save events which can be generated by
        different editors"""
        current_time = time.time()
        if current_time - self.modified_event_time > self.debounce_time:
            self.modified_event_time = current_time
            return True
        return False


class LiveChanges():
    """Main Class for handling live changes."""

    bt_xml_fname: str = ''

    def monitor_file(self, bt_xml_fname: str):
        """Monitoring handed file by setting up observer"""
        self.bt_xml_fname = bt_xml_fname
        self.draw_image(self.bt_xml_fname)
        self.run_in_loop(bt_xml_fname,
                         lambda: self.draw_image(bt_xml_fname))

    def draw_image(self, bt_xml_fname: str):
        """Draw new svg image."""
        g = self.xml_file_to_graph(bt_xml_fname)
        path_to_svg = os.getcwd()
        draw_pygraphviz_svg(
            g,
            path_to_svg + '/live_visualization'
        )

    def xml_file_to_graph(self, bt_xml_fname: str):
        """Convert xml file to graph"""
        assert bt_xml_fname.endswith(
            '.xml'), f'Must be a xml file: {bt_xml_fname}'
        assert os.path.isfile(bt_xml_fname), f'File must exist: {bt_xml_fname}'
        # read xml file
        g, _ = xml_to_networkx(bt_xml_fname)
        return g

    def run_in_loop(self, path: str, trigger_func):
        """Setting up logger and going in while True loop. Meanwhile, File is
        permanently watched for changes and FileModifiedHandler updates SVG."""
        logging.basicConfig(level=logging.INFO,
                            format='%(asctime)s - %(message)s',
                            datefmt='%Y-%m-%d %H:%M:%S')
        event_handler = FileModifiedHandler(trigger_func)

        observer = Observer()
        observer.schedule(event_handler, path, recursive=True)
        observer.start()
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()

        # TODO: delete temp file here?
