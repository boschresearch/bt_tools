# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Serialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()


class TreeNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTreeNode(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TreeNode()
        x.Init(buf, n + offset)
        return x

    # TreeNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TreeNode
    def Uid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # TreeNode
    def ChildrenUid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, a +
                flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # TreeNode
    def ChildrenUidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(
                flatbuffers.number_types.Uint16Flags, o)
        return 0

    # TreeNode
    def ChildrenUidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TreeNode
    def ChildrenUidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # TreeNode
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TreeNode
    def InstanceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TreeNode
    def RegistrationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TreeNode
    def PortRemaps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from btlib.Serialization.PortConfig import PortConfig
            obj = PortConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TreeNode
    def PortRemapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TreeNode
    def PortRemapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(14))
        return o == 0


def TreeNodeStart(builder):
    builder.StartObject(6)


def TreeNodeAddUid(builder, uid):
    builder.PrependUint16Slot(0, uid, 0)


def TreeNodeAddChildrenUid(builder, childrenUid):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(childrenUid), 0)


def TreeNodeStartChildrenUidVector(
        builder, numElems):
    return builder.StartVector(2, numElems, 2)


def TreeNodeAddStatus(builder, status):
    builder.PrependInt8Slot(2, status, 0)


def TreeNodeAddInstanceName(builder, instanceName):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(instanceName), 0)


def TreeNodeAddRegistrationName(builder, registrationName):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(registrationName), 0)


def TreeNodeAddPortRemaps(builder, portRemaps):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(portRemaps), 0)


def TreeNodeStartPortRemapsVector(
        builder, numElems):
    return builder.StartVector(4, numElems, 4)


def TreeNodeEnd(builder):
    return builder.EndObject()
