# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Serialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()


class StatusChangeLog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStatusChangeLog(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatusChangeLog()
        x.Init(buf, n + offset)
        return x

    # StatusChangeLog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatusChangeLog
    def BehaviorTree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from btlib.Serialization.BehaviorTree import BehaviorTree
            obj = BehaviorTree()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusChangeLog
    def StateChanges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from btlib.Serialization.StatusChange import StatusChange
            obj = StatusChange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatusChangeLog
    def StateChangesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatusChangeLog
    def StateChangesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0


def StatusChangeLogStart(builder):
    builder.StartObject(2)


def StatusChangeLogAddBehaviorTree(builder, behaviorTree):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(behaviorTree), 0)


def StatusChangeLogAddStateChanges(builder, stateChanges):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(stateChanges), 0)


def StatusChangeLogStartStateChangesVector(
        builder, numElems):
    return builder.StartVector(16, numElems, 8)


def StatusChangeLogEnd(builder):
    return builder.EndObject()
